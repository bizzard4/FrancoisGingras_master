
#ifndef DATABASETASK_GENERATED_H_
#define DATABASETASK_GENERATED_H_


#include <stdio.h>
#include <pthread.h>

// Business logic include
#include "TaskSystem/Tasks/DatabaseTask/StudentInfo.h"


/******************************
 *  System generated code
 ******************************/

static void send(DatabaseTask this, Message data, int targetTaskID);
static void receive(DatabaseTask this);

static void message_notify(DatabaseTask this);
static void message_wait(DatabaseTask this);
static int message_immediate(DatabaseTask this);

static void *run(void *DatabaseTaskRef);
static void start(DatabaseTask this);

static void handle_RequestMsg(DatabaseTask this, RequestMsg requestMsg);


// The DatabaseTask "class"
struct DatabaseTask {

	// private data members
	pthread_t threadRef;
	int taskID;

	int current_requester_task_id;

	int student_count;
	struct StudentInfo students[100];
};


// The DatabaseTask "constructor"
unsigned int DatabaseTask_create(){

	DatabaseTask newRec = malloc(sizeof(struct DatabaseTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in DatabaseTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	newRec->student_count = 0;

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}


// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *DatabaseTaskRef){
	DatabaseTask this = (DatabaseTask)DatabaseTaskRef;
	start(this);
	pthread_exit(NULL);
}


// The send method can be generated by the system since it always
// does the same thing
static void send(DatabaseTask this, Message data, int targetTaskID){
	Comm->send(Comm, data, targetTaskID);
}

static void message_notify(DatabaseTask this) {
	Comm->message_notify(Comm, this->taskID);
}
static void message_wait(DatabaseTask this) {
	Comm->message_wait(Comm, this->taskID);
}
static int message_immediate(DatabaseTask this) {
	return Comm->message_immediate(Comm, this->taskID);
}


#endif /* DATABASETASK_GENERATED_H_ */
