
#ifndef BazTask_GENERATED_H_
#define BazTask_GENERATED_H_


/******************************
 *  System generated code
 ******************************/


#include <stdio.h>
#include <pthread.h>


static void send(BazTask this, Message data, int targetBazTaskID);
static void receive(BazTask this);

static void *run(void *BazTaskRef);
static void start(BazTask this);

static void handle_TextMsg(BazTask this, TextMsg TextMsg);
static void handle_BarMsg(BazTask this, BarMsg barMsg);


// The BazTask "class"
struct BazTask {

	// private data members
	pthread_t threadRef;
	int taskID;

};


// The BazTask "constructor"
unsigned int BazTask_create(){

	BazTask newRec = malloc(sizeof(struct BazTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in BazTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	//int result = pthread_create( &(newRec->threadRef), NULL, run, NULL);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}


// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *BazTaskRef){

	BazTask this = (BazTask)BazTaskRef;
	start(this);
	pthread_exit(NULL);
}


// The send method can probably be generated by the system since it always
// does the same thing
static void send(BazTask this, Message data, int targetBazTaskID){
	Comm->send(Comm, data, targetBazTaskID);
}


/***************************************************************/







#endif /* BazTask_GENERATED_H_ */
