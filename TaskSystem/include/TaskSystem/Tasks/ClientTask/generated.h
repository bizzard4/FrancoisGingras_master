
#ifndef CLIENTTASK_GENERATED_H_
#define CLIENTTASK_GENERATED_H_


#include <stdio.h>
#include <pthread.h>


/******************************
 *  System generated code
 ******************************/

static int send(ClientTask this, Message data, int targetTaskID);
static void receive(ClientTask this);

static void message_notify(ClientTask this);
static void message_wait(ClientTask this);
static int message_immediate(ClientTask this);

static void repository_set_name(ClientTask this, char name[MAX_NAME_SIZE]);
static int repository_get_id(ClientTask this, char task_name[MAX_NAME_SIZE]);

static void *run(void *ClientTaskRef);
static void start(ClientTask this);

static void handle_ResponseMsg(ClientTask this, ResponseMsg responseMsg);


// The ClientTask "class"
struct ClientTask {

	// private data members
	pthread_t threadRef;
	int taskID;
};


// The ClientTask "constructor"
unsigned int ClientTask_create(){

	ClientTask newRec = malloc(sizeof(struct ClientTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in ClientTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}


// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *ClientTaskRef){
	ClientTask this = (ClientTask)ClientTaskRef;
	start(this);
	pthread_exit(NULL);
}


// The send method can be generated by the system since it always
// does the same thing
static int send(ClientTask this, Message data, int targetTaskID){
	return Comm->send(Comm, data, targetTaskID);
}

static void message_notify(ClientTask this) {
	Comm->message_notify(Comm, this->taskID);
}
static void message_wait(ClientTask this) {
	Comm->message_wait(Comm, this->taskID);
}
static int message_immediate(ClientTask this) {
	return Comm->message_immediate(Comm, this->taskID);
}
static void repository_set_name(ClientTask this, char name[MAX_NAME_SIZE]) {
	Comm->repository_set_name(Comm, name, this->taskID);
}
static int repository_get_id(ClientTask this, char task_name[MAX_NAME_SIZE]) {
	return Comm->repository_get_id(Comm, task_name);
}


#endif /* CLIENTTASK_GENERATED_H_ */
