
#ifndef PAPATASK_GENERATED_H_
#define PAPATASK_GENERATED_H_


#include <stdio.h>
#include <pthread.h>


/******************************
 *  System generated code
 ******************************/

static void send(PapaTask this, Message data, int targetTaskID);
static void receive(PapaTask this, int targetTaskID);

static void message_notify(PapaTask this);
static void message_wait(PapaTask this);
static int message_immediate(PapaTask this);

static void *run(void *PapaTaskRef);
static void start(PapaTask this);


// The PapaTask "class"
struct PapaTask {

	// private data members
	pthread_t threadRef;
	int taskID;

};


// The PapaTask "constructor"
unsigned int PapaTask_create(){

	PapaTask newRec = malloc(sizeof(struct PapaTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in PapaTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}


// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *PapaTaskRef){

	PapaTask this = (PapaTask)PapaTaskRef;
	start(this);
	pthread_exit(NULL);
}


// The send method can be generated by the system since it always
// does the same thing
static void send(PapaTask this, Message data, int targetPapaTaskID){
	Comm->send(Comm, data, targetPapaTaskID);
}

static void message_notify(PapaTask this) {
	Comm->message_notify(Comm, this->taskID);
}
static void message_wait(PapaTask this) {
	Comm->message_wait(Comm, this->taskID);
}
static int message_immediate(PapaTask this) {
	return Comm->message_immediate(Comm, this->taskID);
}


#endif /* PAPATASK_GENERATED_H_ */
