
#ifndef DIRECTMISSRECEIVETASK_GENERATED_H_
#define DIRECTMISSRECEIVETASK_GENERATED_H_

#include <stdio.h>
#include <pthread.h>

/******************************
 *  System generated code
 ******************************/

static void send(DirectMissReceiveTask this, Message data, int targetTaskID);
static void receive(DirectMissReceiveTask this);

//static void *run(void *PapaTaskRef);
static void *run(void *DirectMissReceiveTaskRef);
static void start(DirectMissReceiveTask this);

static void handle_BarMsg(DirectMissReceiveTask this, BarMsg barMsg);

// The DirectMissReceiveTask "class"
struct DirectMissReceiveTask {

	// private data members
	pthread_t threadRef;
	int taskID;

};

// The DirectMissReceiveTask "constructor"
unsigned int DirectMissReceiveTask_create(){

	DirectMissReceiveTask newRec = malloc(sizeof(struct DirectMissReceiveTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in DirectMissReceiveTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}

// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *DirectMissReceiveTaskRef){

	DirectMissReceiveTask this = (DirectMissReceiveTask)DirectMissReceiveTaskRef;
	start(this);
	pthread_exit(NULL);
}

// The send method can be generated by the system since it always
// does the same thing
static void send(DirectMissReceiveTask this, Message data, int targetID){
	Comm->send(Comm, data, targetID);
}

#endif /* DIRECTMISSRECEIVETASK_GENERATED_H_ */
