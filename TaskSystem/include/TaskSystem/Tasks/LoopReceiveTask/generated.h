
#ifndef LOOPRECEIVETASK_GENERATED_H_
#define LOOPRECEIVETASK_GENERATED_H_

#include <stdio.h>
#include <pthread.h>

/******************************
 *  System generated code
 ******************************/

static void send(LoopReceiveTask this, Message data, int targetTaskID);
static void receive(LoopReceiveTask this);

//static void *run(void *PapaTaskRef);
static void *run(void *LoopReceiveTaskRef);
static void start(LoopReceiveTask this);

static void handle_BarMsg(LoopReceiveTask this, BarMsg barMsg);

// The LoopReceiveTask "class"
struct LoopReceiveTask {

	// private data members
	pthread_t threadRef;
	int taskID;

};

// The LoopReceiveTask "constructor"
unsigned int LoopReceiveTask_create(){

	LoopReceiveTask newRec = malloc(sizeof(struct LoopReceiveTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in LoopReceiveTask_create");

	newRec->taskID = Comm->getNextTaskID(Comm);
	Comm->createMsgQ(Comm, newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec->taskID;
}

// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *LoopReceiveTaskRef){

	LoopReceiveTask this = (LoopReceiveTask)LoopReceiveTaskRef;
	start(this);
	pthread_exit(NULL);
}

// The send method can be generated by the system since it always
// does the same thing
static void send(LoopReceiveTask this, Message data, int targetID){
	Comm->send(Comm, data, targetID);
}

#endif /* LOOPRECEIVETASK_GENERATED_H_ */
