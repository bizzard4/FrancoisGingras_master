
#ifndef DIRECTSENDTASK_GENERATED_H_
#define DIRECTSENDTASK_GENERATED_H_


#include <stdio.h>
#include <pthread.h>


/******************************
 *  System generated code
 ******************************/

static void send(DirectSendTask this, Message data, int targetTaskID);
static void receive(DirectSendTask this);

//static void *run(void *PapaTaskRef);
static void *run(void *DirectSendTaskRef);
static void start(DirectSendTask this);


// The DirectSendTask "class"
struct DirectSendTask {

	// private data members
	pthread_t threadRef;
	int taskID;

};


// The DirectSendTask "constructor"
DirectSendTask DirectSendTask_create(){

	DirectSendTask newRec = malloc(sizeof(struct DirectSendTask));
	if(newRec == NULL)
		FatalError("Cannot allocate memory in DirectSendTask_create");

	newRec->taskID = Comm->getNextTaskID();
	Comm->createMsgQ(newRec->taskID);

	int result = pthread_create( &(newRec->threadRef), NULL, run, (void *)newRec);
	if (result){
		printf("ERROR; return code from pthread_create() is %d\n", result);
	    exit(-1);
	}

	return newRec;
}


// a "wrapper" function that hides the complexity of the
// the pthread initialization. Ultimately, it just calls the programmer's
// start function.
static void *run(void *DirectSendTaskRef){

	DirectSendTask this = (DirectSendTask)DirectSendTaskRef;
	start(this);
	pthread_exit(NULL);
}


// The send method can be generated by the system since it always
// does the same thing
static void send(DirectSendTask this, Message data, int targetID){
	Comm->send(data, targetID);
}


#endif /* DIRECTSENDTASK_GENERATED_H_ */
